#*                                                                                                      
  ,----..      ,---,                     ,---,                                                                 
 /   /   \    '  .' \                  .'  .' `\              .--.,                                            
|   :     :  /  ;    '.        ,---,.,---.'     \           ,--.'  \               ,---,                       
.   |  ;. / :  :       \     ,'  .' ||   |  .`\  |          |  | /\/           ,-+-. /  | .--.--.              
.   ; /--`  :  |   /\   \  ,---.'   ,:   : |  '  |   ,---.  :  : :     ,---.  ,--.'|'   |/  /    '     ,---.   
;   | ;  __ |  :  ' ;.   : |   |    ||   ' '  ;  :  /     \ :  | |-,  /     \|   |  ,"' |  :  /`./    /     \  
|   : |.' .'|  |  ;/  \   \:   :  .' '   | ;  .  | /    /  ||  : :/| /    /  |   | /  | |  :  ;_     /    /  | 
.   | '_.' :'  :  | \  \ ,':   |.'   |   | :  |  '.    ' / ||  |  .'.    ' / |   | |  | |\  \    `. .    ' / | 
'   ; : \  ||  |  '  '--'  `---'     '   : | /  ; '   ;   /|'  : '  '   ;   /|   | |  |/  `----.   \'   ;   /| 
'   | '/  .'|  :  :                  |   | '` ,/  '   |  / ||  | |  '   |  / |   | |--'  /  /`--'  /'   |  / | 
|   :    /  |  | ,'                  ;   :  .'    |   :    ||  : \  |   :    |   |/     '--'.     / |   :    | 
 \   \ .'   `--''                    |   ,.'       \   \  / |  |,'   \   \  /'---'        `--'---'   \   \  /  
  `---`                              '---'          `----'  `--'      `----'                          `----'   
                                                                                                               
																	 .--,-``-.     
										  ,----,                    /   /     '.   
										.'   .' \                  / ../        ;  
									  ,----,'    |  __  ,-.        \ ``\  .`-    ' 
									  |    :  .  ;,' ,'/ /|         \___\/   \   : 
									  ;    |.'  / '  | |' | ,---.        \   :   | 
									  `----'/  ;  |  |   ,'/     \       /  /   /  
										/  ;  /   '  :  / /    / '       \  \   \  
									   ;  /  /-,  |  | ' .    ' /    ___ /   :   | 
									  /  /  /.`|  ;  : | '   ; :__  /   /\   /   : 
									./__;      :  |  , ; '   | '.'|/ ,,/  ',-    . 
									|   :    .'    ---'  |   :    :\ ''\        ;  
									;   | .'              \   \  /  \   \     .'   
									`---'                  `----'    `--`-,,-'                                                  
*#  


#------------------------------Begin of global variables---------------------------------#
var w = canvas.width();
var h = canvas.height();
var field = [];
var defenders = [];
var block = Integer(h/15);
var selected = false;
var def1, def2, def3 = false;
var lives = 50;
var waves = 0;
var current_wave = 0;
var timer = time();
var no_money_counter = 0;
var difficulty = 1;
var lauterbachs = 30;
var win_continue = false;
var won = false;
var placeability = false;
var map = [];
var placeable_list = [];
#------------------------------End of global variables---------------------------------#


#------------------------------Begin of field layout---------------------------------#

var field_construction = [		[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
								[1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
								[0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
								[0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
								[0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0],
								[0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
								[0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
								[0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
								[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
								[0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
						];
						
#------------------------------End of field layout---------------------------------#


#------------------------------Begin of class field elements-------------------------------------------#
class field_elements
{
	public:
	var placeable, posx, posy;
		
		constructor(placeable_, posx_, posy_)
		{
			placeable = placeable_;
			posx = posx_;
			posy = posy_;
		}
	
	function draw()
	{
		if placeable == true then 
		{
			canvas.setFillColor(0.75, 0.5, 0.25);
			canvas.fillRect(posx, posy, block, block);
		}
		if placeable == false then 
		{
			canvas.setFillColor(1, 1, 1);
			canvas.fillRect(posx, posy, block, block);	
		}
	}
}

#------------------------------End of class field elements-------------------------------------------#


#------------------------------Begin of class enemy-------------------------------------------#

class enemy
{
	public:
	var name, lives, damage, speedx, speedy, posx, posy, lbs; 	
	
		constructor(name_, lives_, damage_, speedx_, speedy_, posx_, posy_, lbs_)
		{
			name = name_;
			lives = lives_;
			damage = damage_;
			speedx = speedx_;
			speedy = speedy_;
			posx = posx_;
			posy = posy_;
			lbs = lbs_;
		}
		function move()
		{
			posx += speedx;
			posy += speedy;
		}

		function check_lives(i)
		{
			if lives <= 0 then 
			{
				if name == "trainee" then
				{
					lauterbachs += waves[current_wave].enemy1[i].lbs;
					if waves[current_wave].enemy1.size() > 0 then
					{
						while i > waves[current_wave].enemy1.size() do { i -= 1; }
						waves[current_wave].enemy1.remove(i);
					}
				}
				if name == "inspector" then
				{
					lauterbachs += waves[current_wave].enemy2[i].lbs;
					if waves[current_wave].enemy2.size() > 0 then
					{
						while i > waves[current_wave].enemy2.size() do { i -= 1; }
						waves[current_wave].enemy2.remove(i);
					}
				}
				if name == "ga_bus" then
				{
					lauterbachs += waves[current_wave].enemy3[i].lbs;
					if waves[current_wave].enemy3.size() > 0 then
					{
						while i > waves[current_wave].enemy3.size() do { i -= 1; }
						waves[current_wave].enemy3.remove(i);
					}
				}
			}
		}

		function make_damage(damage)
		{
			lives -= damage;
		}
}

#------------------------------End of class enemy-------------------------------------------#


#------------------------------Begin of class defender-------------------------------------------#

class defender
{
	public:
	var name, damage, speedx, speedy, posx, posy, radius, price, selected; 	
	
		constructor(name_, damage_, speedx_, speedy_, posx_, posy_, radius_, price_, selected_)
		{
			name = name_;
			damage = damage_;
			speedx = speedx_;
			speedy = speedy_;
			posx = posx_;
			posy = posy_;
			radius = radius_;
			price = price_;
			selected = selected_;
		}
		
		function drawdefender()
		{
			if name == "gun" then 
			{
				canvas.text(posx+block/2, posy+block/4, "🔫");
			}
			if name == "roaster" then 
			{
				canvas.text(posx+block/2, posy+block/4, "📡");
			}
			if name == "hacker" then 
			{	
				canvas.text(posx+block/2, posy+block/4, "👨‍💻");
			}
		}
		
		function reduce_lives(enemy_name, i)
		{			
			var damage_per_sec = 1;
			if name == "gun" then damage_per_sec = 1;
			if name == "roaster" then damage_per_sec = 0.7;
			if name == "hacker" then damage_per_sec = 0.5;
			if (time()/1000)-(timer/1000) >= damage_per_sec then
			{
				if enemy_name == "trainee" then
				{
					timer = time();
					waves[current_wave].enemy1[i].lives -= damage;
				}
				if enemy_name == "inspector" then
				{
					timer = time();
					waves[current_wave].enemy2[i].lives -= damage;
				}
				if enemy_name == "ga_bus" then
				{
					timer = time();
					waves[current_wave].enemy3[i].lives -= damage;
				}
			}

			
		}	
		
		function range_check()
		{
			var i = 0;
			while i	< waves[current_wave].enemy3.size() do
			{
				if waves[current_wave].enemy3[i].posx >= posx-block*radius and
								   waves[current_wave].enemy3[i].posx <= posx+block*radius and
								   waves[current_wave].enemy3[i].posy >= posy-block*radius and
								   waves[current_wave].enemy3[i].posy <= posy+block*radius then
				{
					reduce_lives(waves[current_wave].enemy3[i].name, i);
				}
				i += 1;
				if i >= waves[current_wave].enemy3.size() then i-1;
			}
			i = 0;
			var j = 0;
			while j	< waves[current_wave].enemy2.size() do
			{
				if waves[current_wave].enemy2[j].posx >= posx-block*radius and
								   waves[current_wave].enemy2[j].posx <= posx+block*radius and
								   waves[current_wave].enemy2[j].posy >= posy-block*radius and
								   waves[current_wave].enemy2[j].posy <= posy+block*radius then
				{
					reduce_lives(waves[current_wave].enemy2[j].name, j);
				}
				j += 1;
			}
			j = 0;
			var k = 0;
			while k	< waves[current_wave].enemy1.size() do
			{
				if waves[current_wave].enemy1[j].posx >= posx-block*radius and
								   waves[current_wave].enemy1[k].posx <= posx+block*radius and
								   waves[current_wave].enemy1[k].posy >= posy-block*radius and
								   waves[current_wave].enemy1[k].posy <= posy+block*radius then
				{
					reduce_lives(waves[current_wave].enemy1[k].name, k);
				}
				k += 1;
			}
			k = 0;
		}
}

#------------------------------End of class defender-------------------------------------------#


#------------------------------Begin of class wave-------------------------------------------#

class wave
{
	public:
	static var wave_ended = false;
	var nr; 
	var enemy1 = []; var enemy2 = []; var enemy3 = [];
		
		constructor(nr_, enemy1_, enemy2_, enemy3_)
		{
			nr = nr_;
			for var i in 0:enemy1_ do
			{enemy1.push(enemy("trainee", 5, 1, 1, 0, i*-50, block+block/2, 2));}
			for var i in 0:enemy2_ do
			{enemy2.push(enemy("inspector", 15, 1, 1, 0, i*-60, block+block/2, 5));}
			for var i in 0:enemy3_ do
			{enemy3.push(enemy("ga_bus", 30, 1, 1, 0, i*-70, block+block/2, 12));}
		}
		
		function check_wave_end()
		{
			if waves[current_wave].enemy1.size() == 0 and waves[current_wave].enemy2.size() == 0 and waves[current_wave].enemy3.size() == 0 then
			{
				wave_ended = true;
				if current_wave == waves.size() then quitEventMode;
				current_wave += 1;
			}
			else
			{
				var i = 0; var j = 0; var k = 0;
				if waves[current_wave].enemy1.size() != 0 then
				{
					while i < waves[current_wave].enemy1.size() do
					{
						if waves[current_wave].enemy1[i].posy == 30*block then waves[current_wave].enemy1.remove(i);
						i += 1;
					}
				}
				
				if waves[current_wave].enemy2.size() != 0 then
				{
					while j < waves[current_wave].enemy2.size() do
					{
						if waves[current_wave].enemy2[j].posy == 30*block then waves[current_wave].enemy2.remove(j);
						j += 1;
					}
				}
				
				if waves[current_wave].enemy3.size() != 0 then
				{
					while k < waves[current_wave].enemy3.size() do
					{
						if waves[current_wave].enemy3[k].posy == 30*block then waves[current_wave].enemy3.remove(k);
						k += 1;
					}
				}
			}
		}
}	

#------------------------------End of class wave-------------------------------------------#


#initilize waves
waves = [wave(1,3,0,0), wave(2,5,0,0), wave(3,15,0,0), wave(4,10,2,0), wave(5,10,10,0), wave(5,5,20,0)];


function initialize_field()
{
	for var i in 0:10 do
	{
		for var j in 0:13 do
		{
			if field_construction[i][j] == 0 then map.push(field_elements(true, j*block, i*block));
			if field_construction[i][j] == 1 then map.push(field_elements(false, j*block, i*block));
		}
	}
}


function initialize_placeable()
{
	for var i in map do
	{
		if i.placeable == true then placeable_list.push([i.posx, i.posy]);
	}
}


function check_placeable(x, y)
{
	for var j in defenders do
	{
		if Integer(x) >= j.posx and Integer(x) < j.posx+block and Integer(y) >= j.posy and Integer(y) < j.posy+block then
		{
			placeability = false;
			return;
		}
	}
	
	for var i in placeable_list do
	{
		if Integer(x) >= i[0] and Integer(x) <= i[0]+block then 
		{
			if Integer(y) >= i[1] and Integer(y) <=((i[1])+block) then
			{
				placeability = true;
			}
		}
	}
}


function draw_shop()
{	
	canvas.setFillColor(0.75, 0.5, 0.25);
	canvas.fillRect(0, 10*block, 13*block, h);
	canvas.setFillColor(0, 0, 0);
	canvas.rect(5*block, 11*block, 2*block, 2*block);
	canvas.rect(7*block, 11*block, 2*block, 2*block);
	canvas.rect(9*block, 11*block, 2*block, 2*block);
	canvas.setFillColor(1, 1, 1);
	canvas.setTextAlign("center");
	canvas.setFont("Arial", block*6/8);
	canvas.text(6*block, 11*block+2*block/3, "🔫");
	canvas.text(8*block, 11*block+2*block/3, "📡");
	canvas.text(10*block, 11*block+2*block/3, "👨‍💻");
	canvas.text(2*block, 11*block, "Wave: " + (current_wave+1));
	canvas.text(2*block, 12*block, "Lives: "+ lives);
	canvas.text(8*block, 13*block+block/4, "Lauterbachs: " + lauterbachs);
}


function checkforcollison(enemy)
{
	if enemy.posx >= block+block/2 and enemy.posx <= 2*block and enemy.posy == block+block/2 then
	{
		enemy.speedx = 0;
		enemy.speedy = 1;
	}
	if enemy.posx >= block+block/2 and enemy.posx <= 2*block and enemy.posy >= 8*block+block/2 then
	{
		enemy.speedx = 1;
		enemy.speedy = 0;	
	}
	if enemy.posx >= 11*block+block/2 and enemy.posy >= 8*block then
	{
		enemy.speedx = 0;
		enemy.speedy = -1;
	}
	if enemy.posx >= 11*block and enemy.posx <= 12*block and enemy.posy >= block and enemy.posy <= block+block/2 then
	{
		enemy.speedx = -1;
		enemy.speedy = 0;
	}
	if enemy.posx <= 4*block+block/2 and enemy.posx > 3*block and enemy.posy >= block and enemy.posy <= 2*block then
	{
		enemy.speedx = 0;
		enemy.speedy = 1;
	}
	if enemy.posx >= 4*block and enemy.posx <= 5*block and enemy.posy >= 4*block+block/2 and enemy.posy <= 5*block then
	{
		enemy.speedx = 1;
		enemy.speedy = 0;
	}
	if enemy.posx >= 8*block+block/2 and enemy.posx <= 9*block and enemy.posy >= 4*block+block/2 and enemy.posy <= 5*block then
	{
		enemy.speedx = 0;
		enemy.speedy = 1;
	}
	
	#if enemy is out of the field
	if enemy.posx >= 8*block and enemy.posx <= 9*block and enemy.posy >= 10*block and enemy.posy <= 12*block then
	{
		lives -= 1;
		enemy.speedx = 0;
		enemy.speedy = 0;
		enemy.posy= 30*block;
	}
}


function drawenemy(enemy)
{								
	if enemy.name == "trainee" then canvas.text(enemy.posx,enemy.posy-block/4,"👮");
	if enemy.name == "inspector" then canvas.text(enemy.posx,enemy.posy-block/4,"🕵️‍♀️");
	if enemy.name == "ga_bus" then canvas.text(enemy.posx,enemy.posy-block/4,"🚔");
}


function no_money(time)
{
	var show_timer = time;
	if no_money_counter <= 0 and show_timer < 0 then return;
	no_money_counter += time;
	if no_money_counter <= 0 then return;
	else 
	{
		canvas.setFillColor(1, 0, 0);
		canvas.text(8*block, 10*block, "Ohhh, Teuer...");
	}
}


function on_mouse_down(event)
{
	if selected then 
	{
		check_placeable(event.x, event.y);
		if placeability == true then
		{
			for var i in placeable_list do
			{
				if Integer(event.x) >= i[0] and Integer(event.x) < i[0]+block and Integer(event.y) >= i[1] and Integer(event.y) < i[1]+block then
				{
					var x = 0;
					var y = 0;
					x = i[0];
					y = i[1];
					if def1 == true then
					{
						lauterbachs -= 30;
						defenders.push(defender("gun", 5, 1, 1, x, y, 2, 30, false));
						def1 = false;
					}
					if def2 == true then
					{
						lauterbachs -= 50;
						defenders.push(defender("roaster", 10, 1, 1, x, y, 3, 50, false));
						def2 = false;
					}
					if def3 == true then
					{
						lauterbachs -= 90;
						defenders.push(defender("hacker", 20, 1, 1, x, y, 4, 90, false));
						def3 = false;
					}
					placeability = false;
					selected = false;
				}
			}
		}
	}
	else
	{
		if event.x >= 5*block and event.x < 7*block and event.y >= 11*block and event.y <= 13*block then
		{
			if lauterbachs >= 30 then
			{
				selected = true;
				def1 = true;
			}
			else no_money(50);
		}
			if event.x >= 7*block and event.x < 9*block and event.y >= 11*block and event.y <= 13*block then
		{
			if lauterbachs >= 50 then
			{
				selected = true;
				def2 = true;
			}
			else no_money(50);
		}
			if event.x >= 9*block and event.x < 11*block and event.y >= 11*block and event.y <= 13*block then
		{
			if lauterbachs >= 90 then
			{
				selected = true;
				def3 = true;
			}
			else no_money(50);
		}
	}
}


#move the defender drawing with mouse until mouseclick
function onMouseMove(event)
{	
	if selected then
	{
		canvas.circle(event.x, event.y, 10);        # draws a circle with center at point where mouse has been moved to
		check_placeable(event.x, event.y);
		if placeability == true then
		{
			canvas.setFillColor(0, 1, 0);
			canvas.fillCircle(event.x, event.y, 10);
			placeability = false;
		}
		else
		{
			canvas.setFillColor(1, 0, 0);
			canvas.fillCircle(event.x, event.y, 10);	
		}
	}
}


function buy_defender()
{
	setEventHandler("canvas.mousedown", on_mouse_down);
	if selected then
	{
		setEventHandler("canvas.mousemove", onMouseMove);
	}
	else setEventHandler("canvas.mousedown", on_mouse_down);
}


function keyInputHandler(event)
{
	if event.key == "Escape" then
	{
		var exit = confirm("exit game");
		if exit then quitEventMode();
	}
	if current_wave == 6 and wave.wave_ended == true then
	{
		if event.key == " " then win_continue = true;
	}
}


function win()
{
	if won != true then
	{
		canvas.setTextAlign("center");
		canvas.setFont("Arial", block*(3/4));
		canvas.setLineWidth(10);
		canvas.setFillColor(0.75, 0.5, 0.25);
		canvas.fillRect(0, 0, w, h);
		canvas.setFillColor(1, 1, 1);
		canvas.text(w/2, h-6*h/8, "Defense System completed - thanks for using");
		canvas.text(w/2, h-5*h/8, "Keystream: 64696573697374646572....");
		canvas.text(w/2, h-(3*h/8+2*(block*(3/4))), "You can copy the key from the messagebox.");
		canvas.text(w/2, h-(3*h/8+block*(3/4)), "Look at the top, where you opend the Canvas,");
		canvas.text(w/2, h-3*h/8, "there you can find the button to open it.");
		print("646965736973746465727363686C75657373656C7374726F6D756D6469726461736C6562656E73636877657265727A756D616368656E616C736E6F7477656E6469676E616A612C72656963687421");
		canvas.text(w/2, h-2*h/8, "< Press space when copyed >");
		won = true;
		setEventHandler("canvas.keydown",keyInputHandler);
	}
	
	if win_continue == true then
	{
		var key_stream; var prmpt = 0;
		while key_stream != "646965736973746465727363686C75657373656C7374726F6D756D6469726461736C6562656E73636877657265727A756D616368656E616C736E6F7477656E6469676E616A612C72656963687421" do
		{
			if prmpt == 0 then key_stream = prompt("Please enter the valid keystream");
			else prompt("Unfortunately it is false! Please enter the valid keystream");
		}
		print("Please XoR the hex version of the entered key with the following cipher");
		print("you can use xor.pw");
		print("Keep in mind that the key and cipher are hex characters. For the remote gallary you need a ASCII base256 string");
		print("64617370617373776f72747a756d65696e6572756c74726167656865696d656e72656d6f746567616c6572696569737473656872737461726b2d667261676d120f0c05100b001215191d1f060b08");
		quitEventMode();
	}
}


function on_tick(event) #things that happens every tick
{
	if current_wave == 6 and wave.wave_ended == true then win();
	else
	{
		var ind = 0;
		for var i in 0:map.size() do
		{
			map[i].draw();
		}

		for var defender in defenders do
		{
			defender.drawdefender();
			defender.range_check();
		}

		for var enemy in waves[current_wave].enemy1 do
		{
			drawenemy(enemy);
			enemy.move();
			checkforcollison(enemy);							#check if enemy is in range of a border
			enemy.check_lives(ind);
			ind += 1;
		}
		ind = 0;
		for var enemy in waves[current_wave].enemy2 do
		{
			drawenemy(enemy);
			enemy.move();
			checkforcollison(enemy);							#check if enemy is in range of a border
			enemy.check_lives(ind);
			ind += 1;
		}
		ind = 0;
		for var enemy in waves[current_wave].enemy3 do
		{
			drawenemy(enemy);
			enemy.move();
			checkforcollison(enemy);							#check if enemy is in range of a border
			enemy.check_lives(ind);
			ind += 1;
		}
		ind = 0;
		draw_shop();
		buy_defender();
		no_money(-1);
		waves[current_wave].check_wave_end(); 
	}
}


function main()
{
	initialize_field();
	initialize_placeable();
	setEventHandler("timer", on_tick); 
	enterEventMode();
}
main();
